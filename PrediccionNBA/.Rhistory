knitr::opts_chunk$set(echo = TRUE)
summary(nba)
library(readr)
library(dplyr)
library(ggplot2)
library(knitr)
nba <-read_csv("nba.csv")
summary(nba)
head(nba)
tail(nba)
info(nba)
head(nba)
tail(nba)
class(nba)
typeof(nba)
src(nba)
head(nba)
tail(nba)
class(nba)
typeof(nba)
src(nba)
head(nba)
tail(nba)
class(nba)
typeof(nba)
src(nba)
head(nba)
tail(nba)
class(nba)
typeof(nba)
size(nba)
length(nba)
dim(nba)
distinct(nba)
nrow(nba[duplicated(nba, Player), ])
duplicated(nba, Player)
columns(nba)
names(nba)
duplicated(nba, "Player")
str(nba)
distinct(nba, Player)
duplicated(nba)
duplicated(nba, Player)
duplicated(nba)
nrow(nba[duplicated(nba), ])
head(nba) #primeras 10 observaciones
tail(nba) #ultimas 10 observaciones
nrow(nba[duplicated(nba), ])
nrow(nba[duplicated(nba$Player), ])
nba <- nba[!duplicated(nba$Player), ]
distinct(nba)
install.packages("reshape")
library(reshape)
library(dplyr)
rename_with(nba, ~ tolower(gsub("%", "_", .x, fixed = TRUE)))
rename_with(nba, ~ tolower(gsub("%", "", .x, fixed = TRUE)))
rename(nba, 3par = threepar)
rename(nba, threepar = "3par")
rename(nba, threepar = 3par)
rename_with(nba, ~ tolower(gsub(c("3", "three", .x, fixed = TRUE)))
head(nba)
View(nba)
nba <- rename_with(nba, ~ tolower(gsub(c("%", "", .x, fixed = TRUE)))
nba <- rename_with(nba, ~ tolower(gsub(c("3", "three", .x, fixed = TRUE)))
View(nba)
nba <- rename_with(nba, ~ tolower(gsub(c("%", "", .x, fixed = TRUE)))
View(nba)
View(nba)
nba <- rename_with(nba, ~ tolower(gsub(c("%", "", .x, fixed = TRUE)))
View(nba)
View(nba)
nba <- rename_with(nba, ~ tolower(gsub(c("%", "", .x, fixed = TRUE)))
View(nba)
View(nba)
nba1 <- rename_with(nba, ~ tolower(gsub(c("%", "", .x, fixed = TRUE)))
nba1 <- rename_with(nba, ~ (gsub(c("%", "", .x, fixed = TRUE)))
nba1 <- rename_with(nba, ~ tolower(gsub(c("%", "", .x, fixed = TRUE)))
rename_with(nba, ~ tolower(gsub(c("%", "", .x, fixed = TRUE)))
rename_with(nba, ~ tolower(gsub(c("%", "", .x, fixed = TRUE)))
library(readr)
library(readr)
library(dplyr)
library(ggplot2)
library(knitr)
nba <-read_csv("nba.csv")
library(readr)
library(dplyr)
library(ggplot2)
library(knitr)
nba <-read_csv("nba.csv")
library(readr)
library(dplyr)
library(ggplot2)
library(knitr)
nba <-read_csv("nba.csv")
library(readr)
library(dplyr)
library(ggplot2)
library(knitr)
nba <-read_csv("nba.csv")
nba <-read_csv("nba.csv")
View(nba)
nba <-read_csv("nba.csv")
library(readr)
library(dplyr)
library(ggplot2)
library(knitr)
nba <-read_csv("nba.csv")
head(nba) #primeras 10 observaciones
tail(nba) #ultimas 10 observaciones
names(nba)
class(nba) #clase de nba
typeof(nba) #tipo de dato interno usado por el objeto
str(nba)
length(nba) #cantidad de columnas
dim(nba) #cantidad de filas y columnas
summary(nba) #summary de los principales estadisticos
distinct(nba)
distinct(nba, Player)
duplicated(nba)
nrow(nba[duplicated(nba$Player), ]) #cuentame los repetidos
nba <- nba[!duplicated(nba$Player), ] #borro los duplicados y lo guardo con el mismo nombre de mi data set
distinct(nba) #compruebo los resultados
nba <- rename_with(nba, ~ tolower(gsub(c("%", "", .x, fixed = TRUE)))
nba <- rename_with(nba, ~ tolower(gsub(c("%", "", .x, fixed = TRUE)))
nba <- nba %>% rename_with(nba, ~ tolower(gsub(c("%", "", .x, fixed = TRUE)))
nba %>% rename_with(nba, ~ tolower(gsub(c("%", "", .x, fixed = TRUE)))
nba %>% rename_with(nba, ~ tolower(gsub(c("%", "", .x, fixed = TRUE)))
nba <- rename_with(nba, ~ tolower(gsub(c("%", "", .x, fixed = TRUE)))
nba <- rename_with(nba, ~ tolower(gsub(c("3", "triple", .x, fixed = TRUE)))
nba <- rename_with(nba, ~ tolower(gsub('%', '', .x, fixed = T)))
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
library(ggplot2)
library(knitr)
nba <-read_csv("nba.csv")
head(nba) #primeras 10 observaciones
tail(nba) #ultimas 10 observaciones
names(nba)
class(nba) #clase de nba
typeof(nba) #tipo de dato interno usado por el objeto
str(nba)
length(nba) #cantidad de columnas
dim(nba) #cantidad de filas y columnas
summary(nba) #summary de los principales estadisticos
distinct(nba)
distinct(nba, Player)
duplicated(nba)
nrow(nba[duplicated(nba$Player), ]) #cuentame los repetidos
nba <- nba[!duplicated(nba$Player), ] #borro los duplicados y lo guardo con el mismo nombre de mi data set
distinct(nba) #compruebo los resultados
nba <- rename_with(nba, ~ tolower(gsub('%', '', .x, fixed = T)))
plot(pressure)
View(nba)
nba <- rename_with(nba, ~ tolower(gsub('3', 'three', .x, fixed = T)))
View(nba)
nba <- rename_with(nba, ~ tolower(gsub('/', '_', .x, fixed = T)))
summarise_all(nba, funs(sum(is.na(.))))
library(readr)
library(dplyr)
library(ggplot2)
library(knitr)
summarise_all(nba, funs(sum(is.na(.))))
library(gvlma)
install.packages(gvlma)
install.packages("gvlma")
library(gvlma)
regres01=lm(salary~.,data=nba)
gvmodel <- gvlma(regres01)
regres01=lm(salary~tm,data=nba)
gvmodel <- gvlma(regres01)
summary(gvmodel)
regres01=lm(salary~nba_country + nba_draftnumber + age + tm + g:vorp,data=nba)
gvmodel <- gvlma(regres01)
summary(gvmodel)
library(MASS)
mod <- lm(Salary ~ country + tm, data=nba)
mod <- lm(salary ~ country + tm, data=nba)
mod <- lm(salary ~ nba_country + tm, data=nba)
anova(mod)
mod <- lm(salary ~ nba_country + tm + nba_draftnumber, data=nba)
anova(mod)
mod <- lm(salary ~ nba_country + tm + nba_draftnumber + age, data=nba)
anova(mod)
mod1 <- lm(salary ~ nba_country + tm + age + g + mp, data=nba)
anova(mod, mod1)
mod <- lm(salary ~ nba_country + tm + age + g + mp, data=nba)
mod1 <- lm(salary ~ nba_country + tm, data=nba)
anova(mod, mod1)
anova(mod1, mod)
regres01=lm(salary~nba_draftnumber:age + g:vorp,data=nba)
gvmodel <- gvlma(regres01)
summary(gvmodel)
regres01=lm(salary~nba_draftnumber*age + g*vorp,data=nba)
gvmodel <- gvlma(regres01)
summary(gvmodel)
regres01=lm(salary~nba_draftnumber*age + g*vorp*g:vorp,data=nba)
gvmodel <- gvlma(regres01)
summary(gvmodel)
regres01=lm(salary~nba_draftnumber + age + g + mp + per + ts + threepar + ftr + orb + drb + trb  + ast + stl + blk + tov + usg + ows + dws + ws + ws_48 + obpm + dbpm + bpm + vorp,data=nba)
gvmodel <- gvlma(regres01)
summary(gvmodel)
knitr::opts_chunk$set(echo = TRUE)
library(car)
qqPlot(regres01, labels = row.names(nba), id.method = "identify",
simulate = TRUE, main = "Q-Q Plot")
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
library(ggplot2)
library(knitr)
nba <-read_csv("nba.csv")
head(nba) #primeras 10 observaciones
tail(nba) #ultimas 10 observaciones
names(nba)
class(nba) #clase de nba
typeof(nba) #tipo de dato interno usado por el objeto
str(nba)
length(nba) #cantidad de columnas
dim(nba) #cantidad de filas y columnas
summary(nba) #summary de los principales estadisticos
distinct(nba)
distinct(nba, Player)
duplicated(nba)
nrow(nba[duplicated(nba$Player), ]) #cuentame los repetidos
nba <- nba[!duplicated(nba$Player), ] #borro los duplicados y lo guardo con el mismo nombre de mi data set
distinct(nba) #compruebo los resultados
summarise_all(nba, funs(sum(is.na(.))))
nba <- rename_with(nba, ~ tolower(gsub('%', '', .x, fixed = T)))
nba <- rename_with(nba, ~ tolower(gsub('3', 'three', .x, fixed = T)))
nba <- rename_with(nba, ~ tolower(gsub('/', '_', .x, fixed = T)))
install.packages("gvlma")
library(gvlma)
regres01 = lm(salary~nba_draftnumber + age + g + mp + per + ts + threepar + ftr + orb + drb + trb  + ast + stl + blk + tov + usg + ows + dws + ws + ws_48 + obpm + dbpm + bpm + vorp,data=nba)
gvmodel <- gvlma(regres01)
summary(gvmodel)
library(MASS)
data("nba")
mod <- lm(salary ~ nba_country + tm + age + g + mp, data = nba)
mod1 <- lm(salary ~ nba_country + tm, data = nba)
anova(mod1, mod)
# vemos que las variables cualitativas country y team no son significativas para estimar el salario de los jugadores
library(car)
qqPlot(regres01, labels = row.names(nba), id.method = "identify",
simulate = TRUE, main = "Q-Q Plot")
plot(pressure)
residplot <- function(fit, nbreaks=10) {
z <- rstudent(fit)
hist(z, breaks=nbreaks, freq=FALSE,
xlab="Studentized Residual",
main="Distribution of Errors")
rug(jitter(z), col="brown")
curve(dnorm(x, mean=mean(z), sd=sd(z)),
add=TRUE, col="blue", lwd=2)
lines(density(z)$x, density(z)$y,
col="red", lwd=2, lty=2)
legend("topright",
legend = c( "Normal Curve", "Kernel Density Curve"),
lty=1:2, col=c("blue","red"), cex=.7)
}
residplot(regres01)
residplot <- function(fit, nbreaks=20) {
z <- rstudent(fit)
hist(z, breaks=nbreaks, freq=FALSE,
xlab="Studentized Residual",
main="Distribution of Errors")
rug(jitter(z), col="brown")
curve(dnorm(x, mean=mean(z), sd=sd(z)),
add=TRUE, col="blue", lwd=2)
lines(density(z)$x, density(z)$y,
col="red", lwd=2, lty=2)
legend("topright",
legend = c( "Normal Curve", "Kernel Density Curve"),
lty=1:2, col=c("blue","red"), cex=.7)
}
residplot(regres01)
crPlots(regres01)
vif(regres01)
sqrt(vif(regres01)) > 2
outlierTest(regres01)
hat.plot <- function(fit) {
p <- length(coefficients(fit))
n <- length(fitted(fit))
plot(hatvalues(fit), main="Index Plot of Hat Values")
abline(h=c(2,3)*p/n, col="red", lty=2)
identify(1:n, hatvalues(fit), names(hatvalues(fit)))
}
hat.plot(regres01)
# Cooks Distance D
# identify D values > 4/(n-k-1)
cutoff <- 4/(nrow(nba)-length(regres01$coefficients)-2)
plot(regres01, which=4, cook.levels=cutoff)
abline(h=cutoff, lty=2, col="red")
# Added variable plots
# add id.method="identify" to interactively identify points
avPlots(regres01, ask=FALSE, id.method="identify")
# Influence Plot
influencePlot(regres01, id.method="identify", main="Influence Plot",
sub="Circle size is proportial to Cook's Distance" )
forecast::BoxCox.lambda(nba$age)
install.packages("forecast")
forecast::BoxCox.lambda(nba$age)
summary(gvmodel)
forecast::BoxCox.lambda(nba$mp)
summary(powerTransform(nba$age))
summary(powerTransform(nba$nba_draftnumber))
summary(powerTransform(nba$tm))
summary(powerTransform(nba$g))
mod <- lm(salary ~ nba_country + tm + nba_draftnumber + age + g + mp + per + ts + threepar + ftr + orb + drb + trb  + ast + stl + blk + tov + usg + ows + dws + ws + ws_48 + obpm + dbpm + bpm + vorp, data = nba)
mod1 <- lm(salary ~ nba_country + tm, data = nba)
anova(mod1, mod)
library(MASS)
stepAIC(regres01, direction="both")
View(nba)
relweights <- function(fit,...){ R <- cor(fit$model)
nvar <- ncol(R)
rxx <- R[2:nvar, 2:nvar]
rxy <- R[2:nvar, 1]
svd <- eigen(rxx)
evec <- svd$vectors
ev <- svd$values
delta <- diag(sqrt(ev))
lambda <- evec %*% delta %*% t(evec)
lambdasq <- lambda ^ 2
beta <- solve(lambda) %*% rxy
rsquare <- colSums(beta ^ 2)
rawwgt <- lambdasq %*% beta ^ 2
import <- (rawwgt / rsquare) * 100
import <- as.data.frame(import)
row.names(import) <- names(fit$model[2:nvar]) names(import) <- "Weights"
relweights <- function(fit,...){
R <- cor(fit$model)
nvar <- ncol(R)
rxx <- R[2:nvar, 2:nvar]
rxy <- R[2:nvar, 1]
svd <- eigen(rxx)
evec <- svd$vectors
ev <- svd$values
delta <- diag(sqrt(ev))
lambda <- evec %*% delta %*% t(evec)
lambdasq <- lambda ^ 2
beta <- solve(lambda) %*% rxy
rsquare <- colSums(beta ^ 2)
rawwgt <- lambdasq %*% beta ^ 2
import <- (rawwgt / rsquare) * 100
import <- as.data.frame(import)
row.names(import) <- names(fit$model[2:nvar]) names(import) <- "Weights"
relweights <- function(fit,...){
R <- cor(fit$model)
nvar <- ncol(R)
rxx <- R[2:nvar, 2:nvar]
rxy <- R[2:nvar, 1]
svd <- eigen(rxx)
evec <- svd$vectors
ev <- svd$values
delta <- diag(sqrt(ev))
lambda <- evec %*% delta %*% t(evec)
lambdasq <- lambda ^ 2
beta <- solve(lambda) %*% rxy
rsquare <- colSums(beta ^ 2)
rawwgt <- lambdasq %*% beta ^ 2
import <- (rawwgt / rsquare) * 100
import <- as.data.frame(import)
row.names(import) <- names(fit$model[2:nvar])
names(import) <- "Weights"
import <- import[order(import),1, drop=FALSE] dotchart(import$Weights, labels=row.names(import),
relweights <- function(fit,...){
R <- cor(fit$model)
nvar <- ncol(R)
rxx <- R[2:nvar, 2:nvar]
rxy <- R[2:nvar, 1]
svd <- eigen(rxx)
evec <- svd$vectors
ev <- svd$values
delta <- diag(sqrt(ev))
lambda <- evec %*% delta %*% t(evec)
lambdasq <- lambda ^ 2
beta <- solve(lambda) %*% rxy
rsquare <- colSums(beta ^ 2)
rawwgt <- lambdasq %*% beta ^ 2
import <- (rawwgt / rsquare) * 100
import <- as.data.frame(import)
row.names(import) <- names(fit$model[2:nvar])
names(import) <- "Weights"
import <- import[order(import),1, drop=FALSE]
dotchart(import$Weights, labels=row.names(import),
xlab="% of R-Square", pch=19,
main="Relative Importance of Predictor Variables",
sub=paste("Total R-Square=", round(rsquare, digits=3)), ...)
return(import)
}
players <- as.data.frame(players.x77[,c("nba_draftnumber", "age", "g", "mp", "per", "threepar", "orb", "trb", "usg", "ws", "obpm")])
relweights <- function(fit,...){
R <- cor(fit$model)
nvar <- ncol(R)
rxx <- R[2:nvar, 2:nvar]
rxy <- R[2:nvar, 1]
svd <- eigen(rxx)
evec <- svd$vectors
ev <- svd$values
delta <- diag(sqrt(ev))
lambda <- evec %*% delta %*% t(evec)
lambdasq <- lambda ^ 2
beta <- solve(lambda) %*% rxy
rsquare <- colSums(beta ^ 2)
rawwgt <- lambdasq %*% beta ^ 2
import <- (rawwgt / rsquare) * 100
import <- as.data.frame(import)
row.names(import) <- names(fit$model[2:nvar])
names(import) <- "Weights"
import <- import[order(import),1, drop=FALSE]
dotchart(import$Weights, labels=row.names(import),
xlab="% of R-Square", pch=19,
main="Relative Importance of Predictor Variables",
sub=paste("Total R-Square=", round(rsquare, digits=3)), ...)
return(import)
}
#players <- as.data.frame(players.x77[,c("nba_draftnumber", "age", "g", "mp", "per", "threepar", "orb", "trb", "usg", "ws", "obpm")])
fit <- lm(salary ~ nba_draftnumber + age + g + mp + per +
threepar + orb + trb + usg + ws + obpm, data=nba)
relweights(fit, col="blue")
library(readr)
library(dplyr)
library(ggplot2)
library(knitr)
library(gvlma)
library(MASS)
library(car)
nba <- read_csv("nba.csv")
